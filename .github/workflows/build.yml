name: Build Windows 12 Edition

on:
  push:
    branches: ['**']
    tags-ignore: ['**']
  pull_request:
    branches: ['**']
    tags-ignore: ['**']
  workflow_dispatch:
    inputs:
      ref:
        description: 'Commit'
        required: true
      config:
        description: 'Configuration'
        required: false
      build_dir:
        description: 'Build dir'
        required: false

env:
  SOLUTION_FILE_PATH: .
  BUILD_CONFIGURATION: Release

jobs:
  build:
    runs-on: windows-latest
    steps:
    - name: Print inputs
      shell: bash
      run: |
        echo "ref: ${{ github.event.inputs.ref }}"
        echo "config: ${{ github.event.inputs.config }}"
        echo "build_dir: ${{ github.event.inputs.build_dir }}"

    - name: Checkout latest build and submodules
      uses: actions/checkout@v4
      if: github.event.inputs.ref == ''
      with:
        submodules: recursive

    - name: Checkout specific build and submodules
      uses: actions/checkout@v4
      if: github.event.inputs.ref != ''
      with:
        ref: ${{ github.event.inputs.ref }}
        submodules: recursive

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v2

    - name: Declare Windows 12 variables
      id: vars
      shell: bash
      run: |
        echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_OUTPUT
        echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "win12_version=12.0.$(date +'%Y%m%d').$(git rev-list --count HEAD)" >> $GITHUB_OUTPUT

    - name: Setup NuGet
      uses: nuget/setup-nuget@v2

    - name: Build Windows 12 dependencies
      shell: cmd
      run: |
        BuildDependencies%BUILD_CONFIGURATION%.bat

    - name: Build Windows 12 IA-32
      if: github.event.inputs.config == ''
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} /p:Platform=IA-32 ${{env.SOLUTION_FILE_PATH}}

    - name: Build Windows 12 amd64
      if: github.event.inputs.config == ''
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} /p:Platform=amd64 ${{env.SOLUTION_FILE_PATH}}
        if exist "build\Release\x64\Windows12.amd64.dll" (
          "build\Release\x64\win12_setup_patch.exe" "build\Release\x64\Windows12.amd64.dll" "build\Release\x64\win12_setup.exe"
        )

    - name: Build Windows 12 arm64
      if: github.event.inputs.config == ''
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} /p:Platform=arm64 /p:WithArm64XBinaries=true ${{env.SOLUTION_FILE_PATH}}
        if exist "build\Release\ARM64\Windows12.arm64.dll" (
          "build\Release\x64\win12_setup_patch.exe" "build\Release\ARM64\Windows12.arm64.dll" "build\Release\ARM64\win12_setup.exe"
        )

    - name: Build Windows 12 custom
      if: github.event.inputs.config != ''
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} /p:Platform=${{ github.event.inputs.config }} ${{env.SOLUTION_FILE_PATH}}

    - name: Create expected build directory
      if: github.event.inputs.build_dir != ''
      shell: bash
      run: |
        mkdir build
        cp -r ${{ github.event.inputs.build_dir }}/Release build/Release

    - name: Generate Windows 12 system files
      shell: bash
      run: |
        if [[ -f "build/Release/x64/Windows12.amd64.dll" ]]; then
          cp build/Release/x64/Windows12.amd64.dll build/Release/x64/win12.dll
        fi
        if [[ -f "build/Release/ARM64/Windows12.arm64.dll" ]]; then
          cp build/Release/ARM64/Windows12.arm64.dll build/Release/ARM64/win12.dll
        fi

    - name: Delete intermediate files
      shell: bash
      run: |
        rm -rf build/Release/x64/win12_setup_files
        rm -f build/Release/x64/win12_setup_files.zip.bin
        rm -rf build/Release/ARM64/win12_setup_files
        rm -f build/Release/ARM64/win12_setup_files.zip.bin

    - name: Upload Windows 12 artifacts
      uses: actions/upload-artifact@v4
      with:
        name: win12_bin_multi_${{ steps.vars.outputs.sha_short }}_${{ steps.vars.outputs.branch }}
        path: |
          build/Release/

    - name: Stage Windows 12 files for release
      if: github.ref == 'refs/heads/main' && github.event.inputs.ref == ''
      shell: bash
      run: |
        if [ -d "build/Release/x64" ] && ls build/Release/x64/win12_setup.exe 1> /dev/null 2>&1; then
          cp build/Release/x64/win12_setup.exe build/Release/win12_setup.exe
        fi
        if [ -d "build/Release/ARM64" ] && ls build/Release/ARM64/win12_setup.exe 1> /dev/null 2>&1; then
          cp build/Release/ARM64/win12_setup.exe build/Release/win12_setup_arm64.exe
        fi

    - name: Generate Windows 12 release name
      shell: bash
      working-directory: build/Release/x64
      if: github.ref == 'refs/heads/main' && github.event.inputs.ref == ''
      run: |
        echo "data=$(./win12_generate_release_name.exe)" >> $GITHUB_OUTPUT
      id: release_name

    - name: Generate Windows 12 release notes
      shell: bash
      working-directory: build/Release/x64
      if: github.ref == 'refs/heads/main' && github.event.inputs.ref == ''
      run: |
        echo "data<<WIN12_RELEASE_DESCRIPTION_DELIM" >> $GITHUB_OUTPUT
        echo "$(./win12_generate_release_description.exe ${{ steps.vars.outputs.sha_short }} ${{ steps.vars.outputs.branch }} ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_OUTPUT
        echo "WIN12_RELEASE_DESCRIPTION_DELIM" >> $GITHUB_OUTPUT
      id: release_description

    - name: Create/update Windows 12 release
      uses: softprops/action-gh-release@v2
      if: github.ref == 'refs/heads/main' && github.event.inputs.ref == ''
      id: create_release
      with:
        draft: false
        prerelease: ${{ !startsWith(github.event.head_commit.message, 'win12_rel_') }}
        name: ${{ steps.release_name.outputs.data }}
        tag_name: ${{ steps.release_name.outputs.data }}_${{ steps.vars.outputs.sha_short }}
        body: ${{ steps.release_description.outputs.data }}
        files: |
          build/Release/win12_setup.exe
          build/Release/win12_setup_arm64.exe
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
